using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UGS.Runtime.Core;
using UnityEngine;
using UnityEngine.Profiling;

namespace UGS.Runtime
{
    public enum CodegenOption
    {
        UnUse = 0,
        Use = 1,
        Both = 2
    }

    public static class UniGoogleSheets
    {
        private static TypeChecker _typeChecker;


        /// <summary>
        ///     어플리케이션 로드 시점에 호출
        /// </summary>
        /// <param name="option"></param>
        public static void Initialize(CodegenOption option = CodegenOption.Use)
        {
#if UNITY_EDITOR
            Profiler.enabled = true;
#endif 
#if UNITY_EDITOR
            Profiler.BeginSample("UGS Initialize");
#endif  
            _typeChecker = new TypeChecker();
            Internal.LoadAllLocalSchemas(); 
#if UNITY_EDITOR
            Profiler.EndSample();
            Profiler.enabled = false;
#endif 
        }


        private static class Internal
        {
            public static void LoadAllLocalSchemas()
            {
                var schemas = AssetLoader.GetAllResourcesSchemas();
                foreach (var schema in schemas)
                {
                    var meta = schema.Meta;
                    var fullName = meta.Namespace + "." + meta.FileName;
                    var type = Utility.GetSchemaAssembly().GetType(fullName);
                    // fake instance for avoid generic
                    var instance = Activator.CreateInstance(type);
                    var method = type.GetMethod("Bind");
                    method?.Invoke(instance, new object[] { schema });
                    Debug.Log(CodeGen.Generate(schema));
                }
            }
        }

        public static class CodeGen
        {
            public static string Generate(string spreadSheetDataJson)
            {
                return Generate(UGSJsonConvert.ReadJson(spreadSheetDataJson));
            }

            public static string Generate(SpreadSheetData data)
            {
                var typeChecker = new TypeChecker();
                CodeGenerator schemaContext = new CodeGenerator();
                CodeGenerator modelContext  = new CodeGenerator();
                schemaContext.UsingNamespace("UGS.Runtime.Core");
                schemaContext.CreateClass($"{data.Meta.Namespace}", $"{data.Meta.FileName} : BaseSchema<{data.Meta.FileName}Model>");
                 
                modelContext.CreateClass($"{data.Meta.Namespace}", $"{data.Meta.FileName}Model");
                foreach (var column in data.Columns) 
                    modelContext.AddField(typeChecker[column.Type].BaseType.FullName, column.Name);

                return string.Concat("/* Auto Generated By UGS  */\n", schemaContext.GenerateCode(), "\n", modelContext.GenerateCode()); 
            }
        }


        public static class Utility
        {
            /// <summary>
            /// 타입체커에 T가 정의되어 있으면 해당 값을 변환하여 읽습니다. 
            /// </summary> 
            public static T Read<T>(string value)
            {
                var type = typeof(T);
                return (T)_typeChecker[type].Read(value);
            }
            /// <summary>
            /// 타입체커에 type이 정의되어 있으면 해당 값을 변환하여 읽습니다.
            /// </summary> 
            public static object Read(Type type, string value)
            {
                return _typeChecker[type].Read(value);
            }
            /// <summary>
            /// 타입체커에 declareType 타입이 정의되어 있으면 해당 값을 변환하여 읽습니다.
            /// </summary> 
            public static object Read(string declareType, string value)
            {
                return _typeChecker[declareType].Read(value);
            }
            
            /// <summary>
            /// 데이터 컬럼의 모든 키값들을 가져옵니다.
            /// </summary>
            /// <param name="data"></param> 
            public static List<string> KeysOf(SpreadSheetData data)
            {
                return data.Columns.First().Values.Select(x => x.ToString()).ToList();
            }

            /// <summary>
            /// 선언(정의)된 스트링 타입을 C# Type으로 변경합니다. 타입체커에 정의 되어있어야 합니다.
            /// </summary> 
            public static Type DeclareToType(string declare)
            {
                return _typeChecker[declare].BaseType;
            }

            /// <summary>
            /// 스키마 어셈블리를 로드합니다.
            /// </summary>
            /// <returns></returns>
            public static Assembly GetSchemaAssembly()
            {
                return Assembly.Load("UniGoogleSheets.Runtime.Schemas");
            }

            /// <summary>
            /// 유니티 구글시트의 런타임 어셈블리를 가져옵니다.
            /// </summary>
            /// <returns></returns>
            public static Assembly GetAssembly()
            {
                return Assembly.Load("UniGoogleSheets.Runtime");
            }
        }
    }
}